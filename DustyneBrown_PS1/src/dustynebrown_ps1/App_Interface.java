/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dustynebrown_ps1;

import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Amont
 */
public class App_Interface extends javax.swing.JDialog {

    /**
     * Creates new form App_Interface
     */
    public App_Interface(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dropBox1 = new javax.swing.JComboBox();
        dropBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dropBox3 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayField = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dbrown_ProblemSet1");

        jLabel1.setText("Branch");

        dropBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""}));
        dropBox1.setEnabled(false);
        dropBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropBox1ActionPerformed(evt);
            }
        });

        dropBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""}));
        dropBox2.setEnabled(false);
        dropBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Product Brand");

        dropBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""}));
        dropBox3.setEnabled(false);
        dropBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropBox3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Product Type");

        jButton1.setText("Go");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        displayField.setEditable(false);
        displayField.setColumns(20);
        displayField.setRows(5);
        jScrollPane1.setViewportView(displayField);

        jButton2.setText("Connect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dropBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1))))
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ////////////////////////////////////////////////////////////////////////////
    //Connect/Reset Button - Changes connect button to say reset, loads the 
    // connection drivers, then calls SQL builder with a code of 1000 (000
    // meaning no selections made), and loads the combo boxes with items
    ////////////////////////////////////////////////////////////////////////////
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       String sql[] = new String[3];
        
        jButton2.setText("Reset");
        
        try
        {
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            sqlBuilder(1000);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            return;
        }     
    }//GEN-LAST:event_jButton2ActionPerformed

    ////////////////////////////////////////////////////////////////////////////
    //All buttons Except for Connect/Reset here - They call the SQL Selector to
    // detect what is selected so far, then pass that to the SQL Builder to
    // get the correct SQL code that is then passed to process combo box before 
    // going back to the builder with the results in order to update the UI
    ////////////////////////////////////////////////////////////////////////////
    private void dropBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropBox1ActionPerformed
        int sqlSelector = getSelections();
        sqlBuilder(sqlSelector);
    }//GEN-LAST:event_dropBox1ActionPerformed
  
    private void dropBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropBox2ActionPerformed
        int sqlSelector = getSelections();
        sqlBuilder(sqlSelector);
    }//GEN-LAST:event_dropBox2ActionPerformed

    private void dropBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropBox3ActionPerformed
        int sqlSelector = getSelections();
        sqlBuilder(sqlSelector);
    }//GEN-LAST:event_dropBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int sqlSelector = getSelections();
        if(sqlSelector < 2000)
        {            
            sqlSelector += 1000;
        }
        sqlBuilder(sqlSelector);
    }//GEN-LAST:event_jButton1ActionPerformed

    ////////////////////////////////////////////////////////////////////////////
    //Executes sql code and gets a results set from the server, then returns the
    //array that the combo box will be filled from
    ////////////////////////////////////////////////////////////////////////////
    private String[] processComboBox(String sql)
    {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rset = null;
        String user = "ua305";
        String pass = "UApass11";
        String url = "jdbc:db2://data.cis.uafs.edu:55000/DATAWH";
        
        String[] resultArray;
        String[] resultArrayS;
        
        int x = 0;
        
        try
        {
            //Connects to database
            con = DriverManager.getConnection(url, user, pass);
            
            //Makes the prepared statements, preps for 'controllable' rset
            pstmt = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            
            //Executes sql and gets results
            rset = pstmt.executeQuery();
            
            //Navigates to the last row of results and sets the arrays to the 
            //result's size
            rset.last();
            resultArray = new String[rset.getRow()];
            resultArrayS = new String[rset.getRow()+1];
            
            //Resets rset (result set) back to the space before the first record
            rset.beforeFirst();
                        
            if(rset != null)
            {
                //Copies all the result set to the first array
                while(rset.next())
                {
                    resultArray[x] = rset.getString(1);
                    x++;
                }
                //Then loops through the second array (Which is one space
                // larger) and leaves the first spot of the second array empty,
                // fills in the rest from the first array
                for(x = 0; x < resultArrayS.length; x++)
                {
                    if(x==0)
                    {
                        resultArrayS[x] = "";
                    }
                    else
                    {
                        resultArrayS[x] = resultArray[x-1] + "";
                    }
                }
            }
            //Closes database connection and returns the formatted string array
            // used to fill in the drop boxes
            con.close();
            return resultArrayS;
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            return null;     
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //Gets the selections from the boxes then loads appropriate sql code
    ////////////////////////////////////////////////////////////////////////////
    private void sqlBuilder(int sqlSelector)
    {
        String sql[] = new String[3];
        switch(sqlSelector)
        {
            case 1000:  sql[0] = "SELECT DISTINCT BRANCH_CODE FROM "
                               + "GOSALES.BRANCH ORDER BY BRANCH_CODE";
                        sql[1] = "SELECT DISTINCT PRODUCT_BRAND_EN FROM "
                               + "GOSALES.PRODUCT_BRAND ORDER BY "
                               + "PRODUCT_BRAND_EN";
                        sql[2] = "SELECT DISTINCT PRODUCT_TYPE_EN FROM "
                               + "GOSALES.PRODUCT_TYPE ORDER BY "
                               + "PRODUCT_TYPE_EN";
                        initializeDropBoxes(sql, sqlSelector);  
                        break;
            //------------------------------------------------------------------
            case 1001:  sql[0] = "SELECT DISTINCT bran.BRANCH_CODE\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvls\n" 
                               + "ON invLvls.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvls.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE as prodType\n" 
                               + "ON prodType.PRODUCT_TYPE_CODE = "
                               + "prod.PRODUCT_TYPE_CODE\n" 
                               + "WHERE UPPER(prodType.PRODUCT_TYPE_EN) LIKE "
                               + "UPPER('" 
                                         + dropBox3.getSelectedItem().toString() 
                               + "') ORDER BY bran.BRANCH_CODE";
                        sql[1] = "SELECT DISTINCT prodBrand.PRODUCT_BRAND_EN "
                               + "FROM GOSALES.PRODUCT_BRAND AS prodBrand "
                               + "JOIN GOSALES.SALES_TARGET AS sTar "
                               + "ON prodBrand.PRODUCT_BRAND_CODE = "
                                    + "sTar.PRODUCT_BRAND_CODE "
                               + "WHERE sTar.PRODUCT_TYPE_CODE = "
                               + "(SELECT prodType.PRODUCT_TYPE_CODE "
                               + "FROM GOSALES.PRODUCT_TYPE AS prodType "
                               + "WHERE UPPER(prodType.PRODUCT_TYPE_EN) "
                               + "LIKE UPPER('" 
                                         + dropBox3.getSelectedItem().toString() 
                               + "') ORDER BY prodBrand.PRODUCT_BRAND_EN)";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 1010:  sql[0] = "SELECT DISTINCT bran.BRANCH_CODE\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND AS prodBrand\n" 
                               + "ON prodBrand.PRODUCT_BRAND_CODE = "
                               + "prod.PRODUCT_BRAND_CODE\n" 
                               + "WHERE UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "')";
                        sql[2] = "SELECT DISTINCT prodType.PRODUCT_TYPE_EN\n" 
                               + "FROM GOSALES.PRODUCT_BRAND AS prodBrand\n" 
                               + "JOIN GOSALES.SALES_TARGET AS saleTar\n" 
                               + "ON saleTar.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON saleTar.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('" 
                               + dropBox2.getSelectedItem().toString()
                               + "')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 1011:  sql[0] = "SELECT DISTINCT bran.BRANCH_CODE\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "')\n" 
                               + "AND UPPER(prodType.PRODUCT_TYPE_EN) "
                               + "LIKE UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               + "')\n" 
                               + "ORDER BY bran.BRANCH_CODE";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 1100:  sql[1] = "SELECT DISTINCT prodBrand.PRODUCT_BRAND_EN\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " ORDER BY prodBrand.PRODUCT_BRAND_EN";
                        sql[2] = "SELECT DISTINCT prodType.PRODUCT_TYPE_EN\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " ORDER BY prodType.PRODUCT_TYPE_EN";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 1101:  sql[1] = "SELECT DISTINCT prodBrand.PRODUCT_BRAND_EN\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " AND UPPER(prodType.PRODUCT_TYPE_EN) LIKE UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               + "') ORDER BY prodBrand.PRODUCT_BRAND_EN";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 1110:  sql[2] = "SELECT DISTINCT prodType.PRODUCT_TYPE_EN\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " AND UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "') ORDER BY prodType.PRODUCT_TYPE_EN";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2111:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " AND UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "') AND UPPER(prodType.PRODUCT_TYPE_EN) "
                               + "LIKE UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               + "')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2000:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2001:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n"
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + " WHERE UPPER(prodType.PRODUCT_TYPE_EN) LIKE "
                               + "UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               +"')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2010: sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + "WHERE UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2011:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + "WHERE UPPER(prodBrand.PRODUCT_BRAND_EN) "
                               + "LIKE UPPER('"
                               + dropBox2.getSelectedItem().toString()
                               + "') AND UPPER(prodType.PRODUCT_TYPE_EN) "
                               + "LIKE UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               + "')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2100:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString();
                        initializeDropBoxes(sql, sqlSelector);
                        break;
            //------------------------------------------------------------------
            case 2101:  sql[0] = "SELECT SUM((orderDet.quantity * "
                               + "orderDet.unit_sale_price)) AS total\n" 
                               + "FROM GOSALES.BRANCH AS bran\n" 
                               + "JOIN GOSALES.INVENTORY_LEVELS AS invLvl\n" 
                               + "ON invLvl.WAREHOUSE_BRANCH_CODE = "
                               + "bran.WAREHOUSE_BRANCH_CODE\n" 
                               + "JOIN GOSALES.PRODUCT AS prod\n" 
                               + "ON prod.PRODUCT_NUMBER = "
                               + "invLvl.PRODUCT_NUMBER\n" 
                               + "JOIN GOSALES.PRODUCT_BRAND as prodBrand\n" 
                               + "ON prod.PRODUCT_BRAND_CODE = "
                               + "prodBrand.PRODUCT_BRAND_CODE\n" 
                               + "JOIN GOSALES.PRODUCT_TYPE AS prodType\n" 
                               + "ON prod.PRODUCT_TYPE_CODE = "
                               + "prodType.PRODUCT_TYPE_CODE\n" 
                               + "JOIN GOSALES.ORDER_DETAILS AS orderDet\n" 
                               + "ON orderDet.PRODUCT_NUMBER = "
                               + "prod.PRODUCT_NUMBER\n" 
                               + "WHERE bran.BRANCH_CODE = "
                               + dropBox1.getSelectedItem().toString()
                               + " AND UPPER(prodType.PRODUCT_TYPE_EN) "
                               + "LIKE UPPER('"
                               + dropBox3.getSelectedItem().toString()
                               + "')";
                        initializeDropBoxes(sql, sqlSelector);
                        break;
                       
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
    //Detects what is selected so far
    ////////////////////////////////////////////////////////////////////////////
    private int getSelections()
    {
        int sqlSelect = 1;
        if(dropBox1.getSelectedItem().toString().length() > 0)
        {
            sqlSelect = parseInt(sqlSelect + "" + "1");
        }
        else
        {
            sqlSelect = parseInt(sqlSelect + "" + "0");
        }
        if(dropBox2.getSelectedItem().toString().length() > 0)
        {
            sqlSelect = parseInt(sqlSelect + "" + "1");
        }
        else
        {
            sqlSelect = parseInt(sqlSelect + "" + "0");
        }
        if(dropBox3.getSelectedItem().toString().length() > 0)
        {
            sqlSelect = parseInt(sqlSelect + "" + "1");
        }
        else
        {
            sqlSelect = parseInt(sqlSelect + "" + "0");
        }
        
        //If all drop boxes have been selected, changes code to execute GO
        // button on it's own
        if(sqlSelect == 1111)
            sqlSelect = 2111;
        return sqlSelect;
    }
    
    
    public static void main(String args[]) 
    {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                App_Interface dialog = new App_Interface(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() 
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) 
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
        
    }

    
    ////////////////////////////////////////////////////////////////////////////
    //Method used to retrieve SQL results and then loads those results into the 
    // combo boxes - Also controls if a box ix enabled or not
    ////////////////////////////////////////////////////////////////////////////
        private void initializeDropBoxes(String[] sql, int selector)
        {
        if(selector == 1000)
        {
            //Gathers results from sql code
            String branchCodesS[] = processComboBox(sql[0]);
            String productBrandS[] = processComboBox(sql[1]);
            String productTypeS[] = processComboBox(sql[2]);
       
            //Builds combo Box based on sql result
            DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
            dropBox1.setModel(model);
            model = new DefaultComboBoxModel(productBrandS);
            dropBox2.setModel(model);
            model = new DefaultComboBoxModel(productTypeS);
            dropBox3.setModel(model);
            
            //Controls which boxes are still active
            dropBox1.setEnabled(true);
            dropBox2.setEnabled(true);
            dropBox3.setEnabled(true);
            jButton1.setEnabled(true);
        }
        else
        {
            if(selector == 1001)
            {
                String branchCodesS[] = processComboBox(sql[0]);
                String productBrandS[] = processComboBox(sql[1]);
                String productTypeS[] = new String[1];
                productTypeS[0] = dropBox3.getSelectedItem().toString();
                dropBox3.setSelectedIndex(0);
                
                DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                dropBox1.setModel(model);
                model = new DefaultComboBoxModel(productBrandS);
                dropBox2.setModel(model);
                model = new DefaultComboBoxModel(productTypeS);
                
                dropBox3.setModel(model);
                dropBox1.setEnabled(true);
                dropBox2.setEnabled(true);
                dropBox3.setEnabled(false);
            }
            else
            {
                if(selector == 1010)
                {
                    String branchCodesS[] = processComboBox(sql[0]);
                    String productBrandS[] = new String[1];
                    productBrandS[0] = dropBox2.getSelectedItem().toString();
                    dropBox2.setSelectedIndex(0);
                    String productTypeS[] = processComboBox(sql[2]);
                    
                    DefaultComboBoxModel model = 
                            new DefaultComboBoxModel(branchCodesS);
                    dropBox1.setModel(model);
                    model = new DefaultComboBoxModel(productBrandS);
                    dropBox2.setModel(model);
                    model = new DefaultComboBoxModel(productTypeS);
                    
                    dropBox3.setModel(model);
                    dropBox1.setEnabled(true);
                    dropBox2.setEnabled(false);
                    dropBox3.setEnabled(true);
                    
                }
                else
                {
                    if(selector == 1011)
                    {
                        String branchCodesS[] = processComboBox(sql[0]);
                        String productBrandS[] = new String[1];
                        productBrandS[0] = 
                                dropBox2.getSelectedItem().toString();
                        dropBox2.setSelectedIndex(0);
                        String productTypeS[] = new String[1];
                        productTypeS[0] =  
                                dropBox3.getSelectedItem().toString();
                        dropBox3.setSelectedIndex(0);
                        
                        DefaultComboBoxModel model = 
                                new DefaultComboBoxModel(branchCodesS);
                        dropBox1.setModel(model);
                        model = new DefaultComboBoxModel(productBrandS);
                        dropBox2.setModel(model);
                        model = new DefaultComboBoxModel(productTypeS);
                        dropBox3.setModel(model);
                        
                        dropBox1.setEnabled(true);
                        dropBox2.setEnabled(false);
                        dropBox3.setEnabled(false);
                    }
                    else
                    {
                        if(selector == 1100)
                        {
                            String branchCodesS[] = new String[1];
                            branchCodesS[0] = 
                                    dropBox1.getSelectedItem().toString();
                            dropBox1.setSelectedIndex(0);
                            String productBrandS[] = processComboBox(sql[1]);
                            String productTypeS[] = processComboBox(sql[2]);

                            DefaultComboBoxModel model = 
                                    new DefaultComboBoxModel(branchCodesS);
                            dropBox1.setModel(model);
                            model = new DefaultComboBoxModel(productBrandS);
                            dropBox2.setModel(model);
                            model = new DefaultComboBoxModel(productTypeS);
                            dropBox3.setModel(model);
                            
                            dropBox1.setEnabled(false);
                            dropBox2.setEnabled(true);
                            dropBox3.setEnabled(true);
                        }
                        else
                        {
                            if(selector == 1101)
                            {
                                String branchCodesS[] = new String[1];
                                branchCodesS[0] = 
                                        dropBox1.getSelectedItem().toString();
                                dropBox1.setSelectedIndex(0);
                                String productBrandS[] = 
                                        processComboBox(sql[1]);
                                String productTypeS[] = new String[1];
                                productTypeS[0] = 
                                        dropBox3.getSelectedItem().toString();
                                dropBox3.setSelectedIndex(0);
                                
                                DefaultComboBoxModel model = 
                                        new DefaultComboBoxModel(branchCodesS);
                                dropBox1.setModel(model);
                                model = new DefaultComboBoxModel(productBrandS);
                                dropBox2.setModel(model);
                                model = new DefaultComboBoxModel(productTypeS);
                                dropBox3.setModel(model);
                                
                                dropBox1.setEnabled(false);
                                dropBox2.setEnabled(true);
                                dropBox3.setEnabled(false);
                            }
                            else
                            {
                                if(selector == 1110)
                                {
                                    String branchCodesS[] = new String[1];
                                    branchCodesS[0] = 
                                            dropBox1.getSelectedItem().toString();
                                    String productBrandS[] = new String[1];
                                    productBrandS[0] = 
                                            dropBox2.getSelectedItem().toString();
                                    dropBox2.setSelectedIndex(0);
                                    String productTypeS[] = 
                                            processComboBox(sql[2]);

                                    DefaultComboBoxModel model = 
                                            new DefaultComboBoxModel(branchCodesS);
                                    dropBox1.setModel(model);
                                    model = new DefaultComboBoxModel(productBrandS);
                                    dropBox2.setModel(model);
                                    model = new DefaultComboBoxModel(productTypeS);
                                    dropBox3.setModel(model);
                                    
                                    dropBox1.setEnabled(false);
                                    dropBox2.setEnabled(false);
                                    dropBox3.setEnabled(true);
                                }
                                else
                                {
                                   if(selector == 2111)
                                   {
                                       String output;
                                       String branchCodesS[] = new String[1];
                                       branchCodesS[0] = 
                                               dropBox1.getSelectedItem().toString();
                                       dropBox1.setSelectedIndex(0);
                                       String productBrandS[] = new String[1];
                                       productBrandS[0] = 
                                               dropBox2.getSelectedItem().toString();
                                       dropBox2.setSelectedIndex(0);
                                       String productTypeS[] = new String[1];
                                       productTypeS[0] = 
                                               dropBox3.getSelectedItem().toString();
                                       dropBox3.setSelectedIndex(0);
                                        
                                       //Additional preps for writing results to
                                       // text field - Lines lets me detect what
                                       // is there alread to prevent duplicates
                                       // - Sales Total String is what holds
                                       // the dollar amount returned from the sql
                                       String[] lines = displayField.getText().split("\n");
                                       String[] salesTotalS = processComboBox(sql[0]);
                                       output = salesTotalS[1] + "";
                                       
                                       DefaultComboBoxModel model = 
                                               new DefaultComboBoxModel(branchCodesS);
                                       dropBox1.setModel(model);
                                       model = new DefaultComboBoxModel(productBrandS);
                                       dropBox2.setModel(model);
                                       model = new DefaultComboBoxModel(productTypeS);
                                       dropBox3.setModel(model);
                                       
                                       dropBox1.setEnabled(false);
                                       dropBox2.setEnabled(false);
                                       dropBox3.setEnabled(false);
                                       jButton1.setEnabled(false);
                                       
                                       //Formats and writes to text field
                                       DecimalFormat myFormatter = 
                                               new DecimalFormat("$###,###,###,##0.00");
                                       String temp = 
                                               myFormatter.format(parseDouble(output));
                                       if(lines[lines.length-1] !=null)
                                       {
                                           if(!lines[lines.length-1].contains(temp))
                                           {
                                                displayField.append("The total sales for \n Branch: " 
                                                + dropBox1.getSelectedItem().toString() +"\n"
                                                + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                + "\nis " + temp + "\n\n");
                                               
                                           }
                                       }
                                       
                                   }
                                   else
                                   {
                                       if(selector == 2000)
                                       {
                                            String output;
                                            String branchCodesS[] = new String[1];
                                            branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                            dropBox1.setSelectedIndex(0);
                                            String productBrandS[] = new String[1];
                                            productBrandS[0] = dropBox2.getSelectedItem().toString();
                                            dropBox2.setSelectedIndex(0);
                                            String productTypeS[] = new String[1];
                                            productTypeS[0] = dropBox3.getSelectedItem().toString();
                                            dropBox3.setSelectedIndex(0);
                                        
                                            String[] lines = displayField.getText().split("\n");
                                            String[] salesTotalS = processComboBox(sql[0]);
                                            output = salesTotalS[1] + "";
                                            
                                            DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                            dropBox1.setModel(model);
                                            model = new DefaultComboBoxModel(productBrandS);
                                            dropBox2.setModel(model);
                                            model = new DefaultComboBoxModel(productTypeS);
                                            dropBox3.setModel(model);
                                            
                                            dropBox1.setEnabled(false);
                                            dropBox2.setEnabled(false);
                                            dropBox3.setEnabled(false);
                                            jButton1.setEnabled(false);
                                            
                                            DecimalFormat myFormatter = new DecimalFormat("$###,###,###,##0.00");
                                            String temp = myFormatter.format(parseDouble(output));
                                            if(lines[lines.length-1] !=null)
                                            {
                                                if(!lines[lines.length-1].contains(temp))
                                                {
                                                    displayField.append("The total sales for \n Branch: " 
                                                                        + dropBox1.getSelectedItem().toString() +"\n"
                                                                        + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                        + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                        + "\nis " + temp + "\n\n");
                                                }
                                            }
                                       }
                                       else
                                       {
                                           if(selector == 2001)
                                           {
                                                String output;
                                                String branchCodesS[] = new String[1];
                                                branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                                dropBox1.setSelectedIndex(0);
                                                String productBrandS[] = new String[1];
                                                productBrandS[0] = dropBox2.getSelectedItem().toString();
                                                dropBox2.setSelectedIndex(0);
                                                String productTypeS[] = new String[1];
                                                productTypeS[0] = dropBox3.getSelectedItem().toString();
                                                dropBox3.setSelectedIndex(0);
                                        
                                                String[] lines = displayField.getText().split("\n");
                                                String[] salesTotalS = processComboBox(sql[0]);
                                                output = salesTotalS[1] + "";
                                                
                                                DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                                dropBox1.setModel(model);
                                                model = new DefaultComboBoxModel(productBrandS);
                                                dropBox2.setModel(model);
                                                model = new DefaultComboBoxModel(productTypeS);
                                                dropBox3.setModel(model);
                                                
                                                dropBox1.setEnabled(false);
                                                dropBox2.setEnabled(false);
                                                dropBox3.setEnabled(false);
                                                jButton1.setEnabled(false);
                                                
                                                DecimalFormat myFormatter = 
                                                        new DecimalFormat("$###,###,###,##0.00");
                                                String temp = myFormatter.format(parseDouble(output));
                                                if(lines[lines.length-1] !=null)
                                                {
                                                    if(!lines[lines.length-1].contains(temp))
                                                    {
                                                        displayField.append("The total sales for \n Branch: " 
                                                                            + dropBox1.getSelectedItem().toString() +"\n"
                                                                            + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                            + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                            + "\nis " + temp + "\n\n");
                                                    }
                                                }
                                           }
                                           else
                                           {
                                                if(selector == 2010)
                                                {
                                                    String output;
                                                    String branchCodesS[] = new String[1];
                                                    branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                                    dropBox1.setSelectedIndex(0);
                                                    String productBrandS[] = new String[1];
                                                    productBrandS[0] = dropBox2.getSelectedItem().toString();
                                                    dropBox2.setSelectedIndex(0);
                                                    String productTypeS[] = new String[1];
                                                    productTypeS[0] = dropBox3.getSelectedItem().toString();
                                                    dropBox3.setSelectedIndex(0);

                                                    String[] lines = displayField.getText().split("\n");

                                                    String[] salesTotalS = processComboBox(sql[0]);
                                                    output = salesTotalS[1] + "";
                                                    
                                                    DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                                    dropBox1.setModel(model);
                                                    model = new DefaultComboBoxModel(productBrandS);
                                                    dropBox2.setModel(model);
                                                    model = new DefaultComboBoxModel(productTypeS);
                                                    dropBox3.setModel(model);
                                                    
                                                    dropBox1.setEnabled(false);
                                                    dropBox2.setEnabled(false);
                                                    dropBox3.setEnabled(false);
                                                    jButton1.setEnabled(false);
                                                    
                                                    DecimalFormat myFormatter = new DecimalFormat("$###,###,###,##0.00");
                                                    String temp = myFormatter.format(parseDouble(output));
                                                    if(lines[lines.length-1] !=null)
                                                    {
                                                        if(!lines[lines.length-1].contains(temp))
                                                        {
                                                            displayField.append("The total sales for \n Branch: " 
                                                                                + dropBox1.getSelectedItem().toString() +"\n"
                                                                                + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                                + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                                + "\nis " + temp + "\n\n");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                     if(selector == 2011)
                                                     {
                                                         String output;
                                                         String branchCodesS[] = new String[1];
                                                         branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                                         dropBox1.setSelectedIndex(0);
                                                         String productBrandS[] = new String[1];
                                                         productBrandS[0] = dropBox2.getSelectedItem().toString();
                                                         dropBox2.setSelectedIndex(0);
                                                         String productTypeS[] = new String[1];
                                                         productTypeS[0] = dropBox3.getSelectedItem().toString();
                                                         dropBox3.setSelectedIndex(0);

                                                         String[] lines = displayField.getText().split("\n");
                                                         String[] salesTotalS = processComboBox(sql[0]);
                                                         output = salesTotalS[1] + "";
                                                         
                                                         DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                                         dropBox1.setModel(model);
                                                         model = new DefaultComboBoxModel(productBrandS);
                                                         dropBox2.setModel(model);
                                                         model = new DefaultComboBoxModel(productTypeS);
                                                         dropBox3.setModel(model);
                                                         
                                                         dropBox1.setEnabled(false);
                                                         dropBox2.setEnabled(false);
                                                         dropBox3.setEnabled(false);
                                                         jButton1.setEnabled(false);
                                                         
                                                        DecimalFormat myFormatter = 
                                                                new DecimalFormat("$###,###,###,##0.00");
                                                         String temp = myFormatter.format(parseDouble(output));
                                                         if(lines[lines.length-1] !=null)
                                                         {
                                                             if(!lines[lines.length-1].contains(temp))
                                                             {
                                                                 displayField.append("The total sales for \n Branch: " 
                                                                                     + dropBox1.getSelectedItem().toString() +"\n"
                                                                                     + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                                     + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                                     + "\nis " + temp + "\n\n");
                                                             }
                                                         }
                                                     }
                                                     else
                                                     {
                                                        if(selector == 2100)
                                                        {
                                                            String output;
                                                            String branchCodesS[] = new String[1];
                                                            branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                                            dropBox1.setSelectedIndex(0);
                                                            String productBrandS[] = new String[1];
                                                            productBrandS[0] = dropBox2.getSelectedItem().toString();
                                                            dropBox2.setSelectedIndex(0);
                                                            String productTypeS[] = new String[1];
                                                            productTypeS[0] = dropBox3.getSelectedItem().toString();
                                                            dropBox3.setSelectedIndex(0);

                                                            String[] lines = displayField.getText().split("\n");
                                                            String[] salesTotalS = processComboBox(sql[0]);
                                                            output = salesTotalS[1] + "";
                                                            
                                                            DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                                            dropBox1.setModel(model);
                                                            model = new DefaultComboBoxModel(productBrandS);
                                                            dropBox2.setModel(model);
                                                            model = new DefaultComboBoxModel(productTypeS);
                                                            dropBox3.setModel(model);
                                                            
                                                            dropBox1.setEnabled(false);
                                                            dropBox2.setEnabled(false);
                                                            dropBox3.setEnabled(false);
                                                            jButton1.setEnabled(false);
                                                            
                                                            DecimalFormat myFormatter = 
                                                                    new DecimalFormat("$###,###,###,##0.00");
                                                            String temp = myFormatter.format(parseDouble(output));
                                                            if(lines[lines.length-1] !=null)
                                                            {
                                                                if(!lines[lines.length-1].contains(temp))
                                                                {
                                                                    displayField.append("The total sales for \n Branch: " 
                                                                                        + dropBox1.getSelectedItem().toString() +"\n"
                                                                                        + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                                        + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                                        + "\nis " + temp + "\n\n");
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if(selector == 2101)
                                                            {
                                                                String output;
                                                                String branchCodesS[] = new String[1];
                                                                branchCodesS[0] = dropBox1.getSelectedItem().toString();
                                                                dropBox1.setSelectedIndex(0);
                                                                String productBrandS[] = new String[1];
                                                                productBrandS[0] = dropBox2.getSelectedItem().toString();
                                                                dropBox2.setSelectedIndex(0);
                                                                String productTypeS[] = new String[1];
                                                                productTypeS[0] = dropBox3.getSelectedItem().toString();
                                                                dropBox3.setSelectedIndex(0);

                                                                String[] lines = displayField.getText().split("\n");
                                                                String[] salesTotalS = processComboBox(sql[0]);
                                                                output = salesTotalS[1] + "";
                                                                
                                                                DefaultComboBoxModel model = new DefaultComboBoxModel(branchCodesS);
                                                                dropBox1.setModel(model);
                                                                model = new DefaultComboBoxModel(productBrandS);
                                                                dropBox2.setModel(model);
                                                                model = new DefaultComboBoxModel(productTypeS);
                                                                dropBox3.setModel(model);
                                                                
                                                                dropBox1.setEnabled(false);
                                                                dropBox2.setEnabled(false);
                                                                dropBox3.setEnabled(false);
                                                                jButton1.setEnabled(false);
                                                                
                                                                DecimalFormat myFormatter = 
                                                                        new DecimalFormat("$###,###,###,##0.00");
                                                                String temp = myFormatter.format(parseDouble(output));
                                                                if(lines[lines.length-1] !=null)
                                                                {
                                                                    if(!lines[lines.length-1].contains(temp))
                                                                    {
                                                                        displayField.append("The total sales for \n Branch: " 
                                                                                            + dropBox1.getSelectedItem().toString() +"\n"
                                                                                            + "Brand :" + dropBox2.getSelectedItem().toString() 
                                                                                            + "\nProduct Type: " + dropBox3.getSelectedItem().toString()
                                                                                            + "\nis " + temp + "\n\n");
                                                                    }
                                                                }
                                                            } 
                                                        }
                                                     }
                                                } 
                                           } 
                                       }
                                   }
                                }
                            }
                        }
                    }
                }
            }
        }
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayField;
    private javax.swing.JComboBox dropBox1;
    private javax.swing.JComboBox dropBox2;
    private javax.swing.JComboBox dropBox3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
